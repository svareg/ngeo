{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./contribs/gmf/examples/displayquerygrid.js","webpack:///./contribs/gmf/src/query/gridComponent.html","webpack:///./contribs/gmf/src/query/gridComponent.js"],"names":["module","angular","gmfDatasourceManager","name","gmfLayertreeComponent","gmfMapComponent","gmfQueryGridComponent","gmfThemeThemes","ngeoGridModule","ngeoMapModule","ngeoMiscBtnComponent","ngeoQueryBboxQueryComponent","ngeoQueryMapQueryComponent","constant","appURL","GMF_THEMES","queryresultComponent","controller","template","require","component","QueryresultController","ngeoQueryResult","result","MainController","gmfThemes","gmfDataSourcesManager","ngeoFeatureOverlayMgr","loadThemes","fill","olStyleFill","color","stroke","olStyleStroke","width","featureStyle","olStyleStyle","image","olStyleCircle","radius","map","olMap","layers","olLayerTile","source","olSourceOSM","view","olView","projection","EPSG21781","resolutions","center","zoom","setDatasourceMap","themes","undefined","treeSource","queryActive","queryGridActive","getThemesObject","then","init","ngeoDownloadCsv","ngeoDownloadService","ngeoGridComponent","ngeoMapFeatureOverlayMgr","ngeoQueryMapQuerent","value","$element","$attrs","templateUrl","run","$templateCache","put","gmfDisplayquerygridTemplateUrl","queryGridComponent","bindings","QueryGridController","$injector","$scope","ngeoMapQuerent","$timeout","ngeoCsvDownload","queryOptions","has","get","$scope_","$timeout_","ngeoMapQuerent_","ngeoCsvDownload_","$element_","maxResults","limit","active","pending","gridSources","loadedGridSources","selectedTab","removeEmptyColumns_","maxRecenterZoom","mergeTabs","featuresForSources_","features_","olCollection","ngeoFeatureOverlayMgr_","highlightFeatures_","filename_","map_","$watchCollection","newQueryResult","oldQueryResult","updateData_","unregisterSelectWatcher_","prototype","$onInit","featuresOverlay","getFeatureOverlay","setFeatures","featuresStyle","console","assert","setStyle","highlightFeaturesOverlay","highlightFeatureStyle","zIndex","mapFn","getGridSources","sourceLabel","total","hasOneWithTooManyResults_","oldActive","clear","sources","Object","keys","length","getMergedSources_","forEach","tooManyResults","makeGrid_","id","escapeValue","features","collectData_","firstSourceId","selectTab","some","toEscape","match","replace","isSelected","gridSource","label","allSources","mergedSources","mergedSource","getMergedSource_","push","mergedSourceId","mergeSourceId","currentMergeSourceId","sourceLabels","containsSource","mergeSource","queried","totalFeatureCount","feature","allProperties","featureGeometriesNames","featuresForSource","properties","featureGeometryName","getProperties","getGeometryName","indexOf","getRowUid","cleanProperties_","gridCreated","removeEmptyColumnsFn_","keysToKeep","i","key","keyToRemove","data","gridConfig","getGridConfiguration_","configuration","clone","assign","ol_uid","columns","columnDefs","column","ngeoGridConfig","selectedRows","newSelected","oldSelectedRows","onSelectionChanged_","updateFeatures_","reflowGrid_","activePane","find","removeClass","addClass","rowId","getActiveGridSource","isOneSelected","getSelectedCount","getSelectedRowCount","selectAll","unselectAll","invertSelection","zoomToSelection","extent","olExtent","getGeometry","getExtent","size","getSize","maxZoom","getView","fit","downloadCsv","getSelectedRows","startDownload"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAiB,4BAA4B;AAC7C;AACA;AACA,0BAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAgB,uBAAuB;AACvC;;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA,IAAMA,MAAM,GAAGC,8CAAO,CAACD,MAAR,CAAe,QAAf,EAAyB,CACtC,SADsC,EAEtCE,iEAAoB,CAACC,IAFiB,EAGtCC,kEAAqB,CAACD,IAHgB,EAItCE,4DAAe,CAACF,IAJsB,EAKtCG,kEAAqB,CAACH,IALgB,EAMtCI,2DAAc,CAACJ,IANuB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","file":"displayquerygrid.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"displayquerygrid\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([4,\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import angular from 'angular';\nimport appURL from './url.js';\nimport './displayquerygrid.css';\nimport gmfDatasourceManager from 'gmf/datasource/Manager.js';\n\nimport gmfLayertreeComponent from 'gmf/layertree/component.js';\n\nimport gmfMapComponent from 'gmf/map/component.js';\n\nimport gmfQueryGridComponent from 'gmf/query/gridComponent.js';\n\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport ngeoGridModule from 'ngeo/grid/module.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscBtnComponent from 'ngeo/misc/btnComponent.js';\nimport EPSG21781 from '@geoblocks/proj/src/EPSG_21781.js';\nimport ngeoQueryBboxQueryComponent from 'ngeo/query/bboxQueryComponent.js';\nimport ngeoQueryMapQueryComponent from 'ngeo/query/mapQueryComponent.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/**\n * @type {!angular.IModule}\n * @hidden\n */\nconst module = angular.module('gmfapp', [\n  'gettext',\n  gmfDatasourceManager.name,\n  gmfLayertreeComponent.name,\n  gmfMapComponent.name,\n  gmfQueryGridComponent.name,\n  gmfThemeThemes.name,\n  ngeoGridModule.name,\n  ngeoMapModule.name, // for ngeo.map.FeatureOverlay, perhaps remove me\n  ngeoMiscBtnComponent.name,\n  ngeoQueryBboxQueryComponent.name,\n  ngeoQueryMapQueryComponent.name,\n]);\n\n\nmodule.constant('ngeoQueryOptions', {\n  'limit': 20,\n  'queryCountFirst': true\n});\n\n\nmodule.constant('gmfTreeUrl', appURL.GMF_THEMES);\n\nmodule.constant('defaultTheme', 'Demo');\nmodule.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * Demo, NOT USED.\n * A sample component to display the result.\n *\n * @type {!angular.IComponentOptions}\n * @hidden\n */\nconst queryresultComponent = {\n  controller: 'gmfappQueryresultController',\n  // @ts-ignore: webpack\n  template: require('./partials/queryresult.html')\n};\n\nmodule.component('gmfappQueryresult', queryresultComponent);\n\n\n/**\n * Demo, NOT USED.\n * @param {import('ngeo/query/MapQuerent.js').QueryResult} ngeoQueryResult Query service.\n * @constructor\n * @ngInject\n */\nfunction QueryresultController(ngeoQueryResult) {\n\n  /**\n   * @type {import('ngeo/query/MapQuerent.js').QueryResult}\n   */\n  this.result = ngeoQueryResult;\n\n}\n\n\nmodule.controller('gmfappQueryresultController', QueryresultController);\n\n\n/**\n * @constructor\n * @param {import(\"gmf/theme/Themes.js\").ThemesService} gmfThemes The gmf themes service.\n * @param {import(\"gmf/datasource/Manager.js\").DatasourceManager} gmfDataSourcesManager The gmf\n *     data sources manager service.\n * @param {import(\"ngeo/map/FeatureOverlayMgr.js\").FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *   overlay manager service.\n * @ngInject\n */\nfunction MainController(gmfThemes, gmfDataSourcesManager, ngeoFeatureOverlayMgr) {\n\n  gmfThemes.loadThemes();\n\n  const fill = new olStyleFill({color: [255, 170, 0, 0.6]});\n  const stroke = new olStyleStroke({color: [255, 170, 0, 1], width: 2});\n\n  /**\n   * FeatureStyle used by the displayquerygrid directive\n   * @type {import(\"ol/style/Style.js\").default}\n   */\n  this.featureStyle = new olStyleStyle({\n    fill: fill,\n    image: new olStyleCircle({\n      fill: fill,\n      radius: 5,\n      stroke: stroke\n    }),\n    stroke: stroke\n  });\n\n  /**\n   * @type {import(\"ol/Map.js\").default}\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      projection: EPSG21781,\n      resolutions: [200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [537635, 152640],\n      zoom: 3\n    })\n  });\n\n  // Init the datasources with our map.\n  gmfDataSourcesManager.setDatasourceMap(this.map);\n\n  /**\n   * @type {Array.<Object>|undefined}\n   * export\n   */\n  this.themes = undefined;\n\n  /**\n   * @type {Object|undefined}\n   */\n  this.treeSource = undefined;\n\n  /**\n   * @type {boolean}\n   */\n  this.queryActive = true;\n\n  /**\n   * @type {boolean}\n   */\n  this.queryGridActive = true;\n\n  gmfThemes.getThemesObject().then((themes) => {\n    if (themes) {\n      this.themes = themes;\n      this.treeSource = themes[3];\n    }\n  });\n\n  ngeoFeatureOverlayMgr.init(this.map);\n}\n\nmodule.controller('MainController', MainController);\n\n\nexport default module;\n","module.exports = function(obj) {\nobj || (obj = {});\nvar __t, __p = '';\nwith (obj) {\n__p += '<div class=\"gmf-displayquerygrid panel\" ng-show=\"ctrl.active\">\\n  <div\\n    class=\"close\"\\n    ng-click=\"ctrl.clear()\">\\n    &times;\\n  </div>\\n\\n  <ul\\n    class=\"nav nav-pills\"\\n    role=\"tablist\">\\n\\n    <li\\n      class=\"nav-item\"\\n      ng-repeat=\"gridSource in ctrl.getGridSources() track by gridSource.source.label\"\\n      role=\"presentation\"\\n      ng-click=\"ctrl.selectTab(gridSource)\">\\n\\n      <a\\n        class=\"nav-link\"\\n        href=\"#{{ctrl.escapeValue(gridSource.source.label)}}\"\\n        ng-class=\"{\\'active\\' : ctrl.isSelected(gridSource)}\"\\n        data-target=\"#{{ctrl.escapeValue(gridSource.source.label)}}\"\\n        aria-controls=\"{{ctrl.escapeValue(gridSource.source.label)}}\"\\n        role=\"tab\"\\n        data-toggle=\"tab\">\\n\\n        <span ng-if=\"gridSource.source.tooManyResults !== true\">\\n          {{gridSource.source.label | translate}} ({{gridSource.source.features.length}})\\n        </span>\\n        <span ng-if=\"gridSource.source.tooManyResults === true\">\\n          {{gridSource.source.label | translate}} ({{gridSource.source.totalFeatureCount}}*)\\n        </span>\\n      </a>\\n    </li>\\n  </ul>\\n\\n  <div class=\"tab-content\">\\n    <div\\n      ng-repeat=\"gridSource in ctrl.getGridSources() track by gridSource.source.label\"\\n      role=\"tabpanel\"\\n      class=\"tab-pane\"\\n      ng-class=\"{\\'active\\' : ctrl.isSelected(gridSource)}\"\\n      id=\"{{ctrl.escapeValue(gridSource.source.label)}}\">\\n\\n      <ngeo-grid\\n        ngeo-grid-configuration=\"gridSource.configuration\"\\n        ng-if=\"gridSource.source.tooManyResults !== true\">\\n      </ngeo-grid>\\n\\n      <div ng-if=\"gridSource.source.tooManyResults === true\">\\n        <div class=\"gmf-displayquerygrid-message alert alert-warning\">\\n          <p><span translate>The results can not be displayed because the maximum number has been reached</span> ({{gridSource.source.limit}}).</p>\\n          <p translate>Please refine your query.</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div ng-show=\"!ctrl.pending && ctrl.getActiveGridSource() && ctrl.getActiveGridSource().configuration !== null\">\\n\\n    <ul class=\"nav justify-content-end\">\\n\\n      <li\\n        class=\"ng-hide\"\\n        ng-show=\"ctrl.isOneSelected()\">\\n        <div class=\"btn btn-sm ng-binding\">\\n          {{ctrl.getSelectedRowCount()}} <span translate>selected element(s)</span>\\n        </div>\\n      </li>\\n\\n      <li\\n        ng-show=\"ctrl.isOneSelected()\"\\n        class=\"ng-hide\">\\n        <button\\n          class=\"btn btn-link btn-sm\"\\n          title=\"{{\\'Zoom to selection\\' | translate}}\"\\n          ng-click=\"ctrl.zoomToSelection()\">\\n          <i class=\"fa fa-search-plus\"></i> <span translate>Zoom to</span>\\n        </button>\\n      </li>\\n\\n      <li\\n        ng-show=\"ctrl.isOneSelected()\"\\n        class=\"ng-hide\">\\n        <button\\n          class=\"btn btn-link btn-sm\"\\n          title=\"{{\\'Export selection as CSV\\' | translate}}\"\\n          ng-click=\"ctrl.downloadCsv()\">\\n          <i class=\"fa fa-download\"></i> <span translate>Export as CSV</span>\\n        </button>\\n      </li>\\n\\n      <li class=\"dropdown\">\\n        <button\\n          type=\"button\"\\n          class=\"dropup btn btn-default btn-sm dropdown-toggle\"\\n          data-toggle=\"dropdown\"\\n          aria-haspopup=\"true\"\\n          aria-expanded=\"false\">\\n          <span translate>Select</span>\\n        </button>\\n        <ul\\n          class=\"dropdown-menu\"\\n          aria-labelledby=\"dLabel\">\\n          <li>\\n            <a\\n              href=\"\"\\n              ng-click=\"ctrl.selectAll()\" translate>All</a>\\n          </li>\\n          <li>\\n            <a\\n              href=\"\"\\n              ng-click=\"ctrl.unselectAll()\" translate>None</a>\\n          </li>\\n          <li>\\n            <a\\n              href=\"\"\\n              ng-click=\"ctrl.invertSelection()\" translate>Reverse selection</a>\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <div\\n    ng-show=\"ctrl.pending\"\\n    class=\"gmf-displayquerygrid-pending\">\\n    <span class=\"fa fa-spinner fa-spin\"></span>\\n  </div>\\n</div>\\n';\n\n}\nreturn __p\n}","import angular from 'angular';\n\nimport ngeoDownloadCsv from 'ngeo/download/Csv.js';\n\nimport ngeoDownloadService from 'ngeo/download/service.js';\n\nimport ngeoGridComponent from 'ngeo/grid/component.js';\n\nimport ngeoGridConfig, {getRowUid} from 'ngeo/grid/Config.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\n\nimport ngeoQueryMapQuerent from 'ngeo/query/MapQuerent.js';\n\nimport olCollection from 'ol/Collection.js';\nimport * as olExtent from 'ol/extent.js';\nimport olMap from 'ol/Map.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\nimport 'bootstrap/js/src/dropdown.js';\n\n\n/**\n * Configuration for a grid tab.\n * @typedef {Object} GridSource\n * @property {import(\"ngeo/grid/Config.js\").default} configuration Configuration used to initialize a grid.\n * @property {import('ngeo/statemanager/WfsPermalink.js').QueryResultSource} source Results of the query\n *    source.\n */\n\n\n/**\n * Configuration option for {@link import(\"gmf/query/gridComponent.js\").default} to merge\n * grid tabs.\n *\n * E.g. `'two_wheels_park': ['velo_park', 'moto_park']}` merges the sources\n * with label `velo_park` and `moto_park` into a new source `two_wheels_park`.\n *\n * @typedef {Object<string, Array.<string>>} GridMergeTabs\n */\n\n\n/**\n * @type {!angular.IModule}\n * @hidden\n */\nconst module = angular.module('gmfQueryGridComponent', [\n  ngeoDownloadCsv.name,\n  ngeoDownloadService.name,\n  ngeoGridComponent.name,\n  ngeoMapFeatureOverlayMgr.name,\n  ngeoQueryMapQuerent.name,\n]);\n\n\nmodule.value('gmfDisplayquerygridTemplateUrl',\n  /**\n   * @param {!JQuery} $element Element.\n   * @param {!angular.IAttributes} $attrs Attributes.\n   * @return {string} Template URL.\n   */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['gmfDisplayquerygridTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      'gmf/query/gridComponent';\n  }\n);\n\nmodule.run(/* @ngInject */ ($templateCache) => {\n  // @ts-ignore: webpack\n  $templateCache.put('gmf/query/gridComponent', require('./gridComponent.html'));\n});\n\n\n/**\n * @param {!JQuery} $element Element.\n * @param {!angular.IAttributes} $attrs Attributes.\n * @param {!function(!JQuery, !angular.IAttributes): string} gmfDisplayquerygridTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n * @private\n * @hidden\n */\nfunction gmfDisplayquerygridTemplateUrl($element, $attrs, gmfDisplayquerygridTemplateUrl) {\n  return gmfDisplayquerygridTemplateUrl($element, $attrs);\n}\n\n\n/**\n * Provides a component to display results of the {@link import(\"ngeo/queryResult.js\").default} in a\n * grid and shows related features on the map using\n * the {@link import(\"ngeo/map/FeatureOverlayMgr.js\").FeatureOverlayMgr}.\n *\n * You can override the default component's template by setting the\n * value `gmfDisplayquerygridTemplateUrl`.\n *\n * Features displayed on the map use a default style but you can override these\n * styles by passing ol.style.Style objects as attributes of this component.\n *\n * Note: the following ng-class need to be present in the interface <body> element to display the footer\n * when the grid is active (initially there should be the code for the profile tool):\n *      <body ng-class=\"{\n *        'gmf-profile-chart-active': !!profileChartActive,\n *        'gmf-query-grid-active': !!queryGridActive\n *      }\">\n *\n * Example:\n *\n *      <gmf-displayquerygrid\n *        gmf-displayquerygrid-map=\"ctrl.map\"\n *        gmf-displayquerygrid-featuresstyle=\"ctrl.styleForAllFeatures\"\n *        gmf-displayquerygrid-selectedfeaturestyle=\"ctrl.styleForTheCurrentFeature\">\n *      </gmf-displayquerygrid>\n *\n * @htmlAttribute {boolean} gmf-displayquerygrid-active The active state of the component.\n * @htmlAttribute {import(\"ol/style/Style.js\").default} gmf-displayquerygrid-featuresstyle A style\n *     object for all features from the result of the query.\n * @htmlAttribute {import(\"ol/style/Style.js\").default} gmf-displayquerygrid-selectedfeaturestyle A style\n *     object for the currently selected features.\n * @htmlAttribute {import(\"ol/Map.js\").default} gmf-displayquerygrid-map The map.\n * @htmlAttribute {boolean?} gmf-displayquerygrid-removeemptycolumns Optional. Should\n *     empty columns be hidden? Default: `false`.\n * @htmlAttribute {number?} gmf-displayquerygrid-maxrecenterzoom Optional. Maximum\n *     zoom-level to use when zooming to selected features.\n * @htmlAttribute {GridMergeTabs?} gmf-displayquerygrid-gridmergetabs Optional.\n *     Configuration to merge grids with the same attributes into a single grid.\n *\n * @ngdoc component\n * @ngname gmfDisplayquerygrid\n */\nconst queryGridComponent = {\n  controller: 'GmfDisplayquerygridController as ctrl',\n  bindings: {\n    'active': '=?gmfDisplayquerygridActive',\n    'featuresStyleFn': '&gmfDisplayquerygridFeaturesstyle',\n    'selectedFeatureStyleFn': '&gmfDisplayquerygridSelectedfeaturestyle',\n    'getMapFn': '&gmfDisplayquerygridMap',\n    'removeEmptyColumnsFn': '&?gmfDisplayquerygridRemoveemptycolumns',\n    'maxResultsFn': '&?gmfDisplayquerygridMaxresults',\n    'maxRecenterZoomFn': '&?gmfDisplayquerygridMaxrecenterzoom',\n    'mergeTabs': '<?gmfDisplayquerygridMergetabs'\n  },\n  templateUrl: gmfDisplayquerygridTemplateUrl\n};\n\n\nmodule.component('gmfDisplayquerygrid', queryGridComponent);\n\n\n/**\n * Controller for the query grid.\n *\n * @param {!angular.auto.IInjectorService} $injector Main injector.\n * @param {!angular.IScope} $scope Angular scope.\n * @param {!import('ngeo/query/MapQuerent.js').QueryResult} ngeoQueryResult ngeo query result.\n * @param {!import(\"ngeo/query/MapQuerent.js\").MapQuerent} ngeoMapQuerent ngeo map querent service.\n * @param {!import(\"ngeo/map/FeatureOverlayMgr.js\").FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *     overlay manager service.\n * @param {!angular.ITimeoutService} $timeout Angular timeout service.\n * @param {!import(\"ngeo/download/Csv.js\").DownloadCsvService} ngeoCsvDownload CSV download service.\n * @param {!JQuery} $element Element.\n * @constructor\n * @hidden\n * @ngInject\n * @ngdoc controller\n * @ngname GmfDisplayquerygridController\n */\nexport function QueryGridController($injector, $scope, ngeoQueryResult, ngeoMapQuerent,\n  ngeoFeatureOverlayMgr, $timeout, ngeoCsvDownload, $element) {\n\n  const queryOptions = /** @type {import('ngeo/query/MapQuerent.js').QueryOptions} */ (\n    $injector.has('ngeoQueryOptions') ?\n      $injector.get('ngeoQueryOptions') : {});\n\n  /**\n   * @type {!angular.IScope}\n   * @private\n   */\n  this.$scope_ = $scope;\n\n  /**\n   * @type {!angular.ITimeoutService}\n   * @private\n   */\n  this.$timeout_ = $timeout;\n\n  /**\n   * @type {!import('ngeo/query/MapQuerent.js').QueryResult}\n   */\n  this.ngeoQueryResult = ngeoQueryResult;\n\n  /**\n   * @type {!import(\"ngeo/query/MapQuerent.js\").MapQuerent}\n   * @private\n   */\n  this.ngeoMapQuerent_ = ngeoMapQuerent;\n\n  /**\n   * @type {!import(\"ngeo/download/Csv.js\").DownloadCsvService}\n   * @private\n   */\n  this.ngeoCsvDownload_ = ngeoCsvDownload;\n\n  /**\n   * @type {!JQuery}\n   * @private\n   */\n  this.$element_ = $element;\n\n  /**\n   * @type {number}\n   */\n  this.maxResults = queryOptions.limit !== undefined ? queryOptions.limit : 50;\n\n  /**\n   * @type {boolean}\n   */\n  this.active = false;\n\n  /**\n   * @type {boolean}\n   */\n  this.pending = false;\n\n  /**\n   * @type {!Object.<string, GridSource>}\n   */\n  this.gridSources = {};\n\n  /**\n   * IDs of the grid sources in the order they were loaded.\n   * @type {!Array.<string>}\n   */\n  this.loadedGridSources = [];\n\n  /**\n   * The id of the currently shown query source.\n   * @type {string|number|null}\n   */\n  this.selectedTab = null;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.removeEmptyColumns_ = false;\n\n  /**\n   * @type {number|undefined}\n   */\n  this.maxRecenterZoom;\n\n  /**\n   * @type {!GridMergeTabs}\n   */\n  this.mergeTabs = {};\n\n  /**\n   * A mapping between row uid and the corresponding feature for each\n   * source.\n   * @type {!Object.<string, Object.<string, import(\"ol/Feature.js\").default>>}\n   * @private\n   */\n  this.featuresForSources_ = {};\n\n  // Styles for displayed features (features) and selected features\n  // (highlightFeatures_) (user can set both styles).\n  /**\n   * @type {!import(\"ol/Collection.js\").default}\n   * @private\n   */\n  this.features_ = new olCollection();\n\n  /**\n   * @type {!import(\"ngeo/map/FeatureOverlayMgr.js\").FeatureOverlayMgr}\n   * @private\n   */\n  this.ngeoFeatureOverlayMgr_ = ngeoFeatureOverlayMgr;\n\n  /**\n   * @type {!import(\"ol/Collection.js\").default}\n   * @private\n   */\n  this.highlightFeatures_ = new olCollection();\n\n  /**\n   * Filename\n   * @type {string}\n   * @private\n   */\n  this.filename_ = $injector.has('gmfCsvFilename') ?\n    $injector.get('gmfCsvFilename') : 'query-results.csv';\n\n  /**\n   * @type {import(\"ol/Map.js\").default}\n   * @private\n   */\n  this.map_ = null;\n\n  // Watch the ngeo query result service.\n  this.$scope_.$watchCollection(\n    () => ngeoQueryResult,\n    (newQueryResult, oldQueryResult) => {\n      if (newQueryResult !== oldQueryResult) {\n        this.updateData_();\n      }\n    });\n\n  /**\n   * An unregister function returned from `$scope.$watchCollection` for\n   * \"on-select\" changes (when rows are selected/unselected).\n   * @type {?function(): void}\n   * @private\n   */\n  this.unregisterSelectWatcher_ = null;\n}\n\n/**\n * Init the controller\n */\nQueryGridController.prototype.$onInit = function() {\n  this.removeEmptyColumns_ = this['removeEmptyColumnsFn'] ? this['removeEmptyColumnsFn']() === true : false;\n  this.maxRecenterZoom = this['maxRecenterZoomFn'] ? this['maxRecenterZoomFn']() : undefined;\n\n  const featuresOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  featuresOverlay.setFeatures(this.features_);\n  const featuresStyle = this['featuresStyleFn']();\n  if (featuresStyle !== undefined) {\n    console.assert(featuresStyle instanceof olStyleStyle);\n    featuresOverlay.setStyle(featuresStyle);\n  }\n\n  const highlightFeaturesOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  highlightFeaturesOverlay.setFeatures(this.highlightFeatures_);\n  let highlightFeatureStyle = this['selectedFeatureStyleFn']();\n  if (highlightFeatureStyle !== undefined) {\n    console.assert(highlightFeatureStyle instanceof olStyleStyle);\n  } else {\n    const fill = new olStyleFill({color: [255, 0, 0, 0.6]});\n    const stroke = new olStyleStroke({color: [255, 0, 0, 1], width: 2});\n    highlightFeatureStyle = new olStyleStyle({\n      fill: fill,\n      image: new olStyleCircle({\n        fill: fill,\n        radius: 5,\n        stroke: stroke\n      }),\n      stroke: stroke,\n      zIndex: 10\n    });\n  }\n  highlightFeaturesOverlay.setStyle(highlightFeatureStyle);\n\n  const mapFn = this['getMapFn'];\n  if (mapFn) {\n    const map = mapFn();\n    console.assert(map instanceof olMap);\n    this.map_ = map;\n  }\n};\n\n/**\n * Returns a list of grid sources in the order they were loaded.\n * @return {Array.<GridSource>} Grid sources.\n */\nQueryGridController.prototype.getGridSources = function() {\n  return this.loadedGridSources.map(sourceLabel => this.gridSources[sourceLabel]);\n};\n\n\n/**\n * @private\n */\nQueryGridController.prototype.updateData_ = function() {\n  // close if there are no results\n  if (\n    (\n      this.ngeoQueryResult.pending ||\n      this.ngeoQueryResult.total === 0\n    ) &&\n    !this.hasOneWithTooManyResults_()\n  ) {\n    const oldActive = this.active;\n    this.clear();\n    if (oldActive) {\n      // don't close if there are pending queries\n      this.active = this.ngeoQueryResult.pending;\n      this.pending = this.ngeoQueryResult.pending;\n    }\n    return;\n  }\n\n  this.active = true;\n  this.pending = false;\n  let sources = this.ngeoQueryResult.sources;\n  // merge sources if requested\n  if (Object.keys(this.mergeTabs).length > 0) {\n    sources = this.getMergedSources_(sources);\n  }\n\n  // create grids (only for source with features or with too many results)\n  sources.forEach((source) => {\n    if (source.tooManyResults) {\n      this.makeGrid_(null, source);\n    } else {\n      source.id = this.escapeValue(source.id);\n      const features = source.features;\n      if (features.length > 0) {\n        this.collectData_(source);\n      }\n    }\n  });\n\n  if (this.loadedGridSources.length === 0) {\n    // if no grids were created, do not show\n    this.active = false;\n    return;\n  }\n\n  // keep the first existing navigation tab open\n  if (this.selectedTab === null || !((`${this.selectedTab}`) in this.gridSources)) {\n    // selecting the tab is done in a timeout, because otherwise in rare cases\n    // `ng-class` might set the `active` class on multiple tabs.\n    this.$timeout_(() => {\n      const firstSourceId = this.loadedGridSources[0];\n      this.selectTab(this.gridSources[firstSourceId]);\n    }, 0);\n  }\n};\n\n\n/**\n * @private\n * @return {boolean} If one of the source has too many results.\n */\nQueryGridController.prototype.hasOneWithTooManyResults_ = function() {\n  return this.ngeoQueryResult.sources.some(source => source.tooManyResults);\n};\n\n/**\n * Returns the value with all symbols and spaces replaced by an underscore.\n * @param {string|number} value A value to escape.\n * @returns {string|number} value An escaped value.\n */\nQueryGridController.prototype.escapeValue = function(value) {\n  // Work-around for Number.isInteger() when not always getting a number ...\n  if (typeof value == 'number') {\n    return value;\n  } else {\n    const toEscape = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\ |]/g;\n    if (value.match(toEscape) !== null) {\n      return value.replace(toEscape, '_');\n    } else {\n      return value;\n    }\n  }\n};\n\n\n/**\n * Returns if the given grid source is selected?\n * @param {GridSource} gridSource Grid source.\n * @return {boolean} Is selected?\n */\nQueryGridController.prototype.isSelected = function(gridSource) {\n  return this.selectedTab === gridSource.source.label;\n};\n\n\n/**\n * Try to merge the mergable sources.\n * @param {Array.<import('ngeo/statemanager/WfsPermalink.js').QueryResultSource>} sources Sources.\n * @return {Array.<import('ngeo/statemanager/WfsPermalink.js').QueryResultSource>} The merged sources.\n * @private\n */\nQueryGridController.prototype.getMergedSources_ = function(sources) {\n  const allSources = [];\n  /** @type {Object.<string, import('ngeo/statemanager/WfsPermalink.js').QueryResultSource>} */\n  const mergedSources = {};\n\n  sources.forEach((source) => {\n    // check if this source can be merged\n    const mergedSource = this.getMergedSource_(source, mergedSources);\n\n    if (mergedSource === null) {\n      // this source should not be merged, add as is\n      allSources.push(source);\n    }\n  });\n\n  for (const mergedSourceId in mergedSources) {\n    allSources.push(mergedSources[mergedSourceId]);\n  }\n\n  return allSources;\n};\n\n\n/**\n * Check if the given source should be merged. If so, an artificial source\n * that will contain the features of all mergable sources is returned. If not,\n * `null` is returned.\n * @param {import('ngeo/statemanager/WfsPermalink.js').QueryResultSource} source Source.\n * @param {Object.<string, import('ngeo/statemanager/WfsPermalink.js').QueryResultSource>} mergedSources\n *    Merged sources.\n * @return {?import('ngeo/statemanager/WfsPermalink.js').QueryResultSource} A merged source of null if the\n *    source should not be merged.\n * @private\n */\nQueryGridController.prototype.getMergedSource_ = function(source, mergedSources) {\n  let mergeSourceId = null;\n\n  for (const currentMergeSourceId in this.mergeTabs) {\n    const sourceLabels = this.mergeTabs[currentMergeSourceId];\n    const containsSource = sourceLabels.some(sourceLabel => sourceLabel == source.label);\n    if (containsSource) {\n      mergeSourceId = currentMergeSourceId;\n      break;\n    }\n  }\n\n  if (mergeSourceId === null) {\n    // this source should not be merged\n    return null;\n  }\n\n  /** @type {import('ngeo/statemanager/WfsPermalink.js').QueryResultSource} */\n  let mergeSource;\n  if (mergeSourceId in mergedSources) {\n    mergeSource = mergedSources[mergeSourceId];\n  } else {\n    mergeSource = {\n      features: [],\n      id: mergeSourceId,\n      label: mergeSourceId,\n      limit: this.maxResults,\n      pending: false,\n      queried: true,\n      tooManyResults: false,\n      totalFeatureCount: undefined\n    };\n    mergedSources[mergeSourceId] = mergeSource;\n  }\n\n  // add features of source to merge source\n  source.features.forEach((feature) => {\n    mergeSource.features.push(feature);\n  });\n\n  // if one of the source has too many results, the resulting merged source will\n  // also be marked with `tooManyResults` and will not contain any features.\n  mergeSource.tooManyResults = mergeSource.tooManyResults || source.tooManyResults;\n  if (mergeSource.tooManyResults) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + mergeSource.features.length : mergeSource.features.length;\n    mergeSource.features = [];\n  }\n  if (source.totalFeatureCount !== undefined) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + source.totalFeatureCount : source.totalFeatureCount;\n  }\n\n  return mergeSource;\n};\n\n\n/**\n * Collect all features in the queryResult object.\n * @param {import('ngeo/statemanager/WfsPermalink.js').QueryResultSource} source Result source.\n * @private\n */\nQueryGridController.prototype.collectData_ = function(source) {\n  const features = source.features;\n  const allProperties = [];\n  const featureGeometriesNames = [];\n  /** @type {Object<string, !import(\"ol/Feature.js\").default>} */\n  const featuresForSource = {};\n  let properties, featureGeometryName;\n  features.forEach((feature) => {\n    properties = feature.getProperties();\n    if (properties !== undefined) {\n      // Keeps distinct geometry names to remove theme later.\n      featureGeometryName = feature.getGeometryName();\n      if (featureGeometriesNames.indexOf(featureGeometryName) === -1) {\n        featureGeometriesNames.push(featureGeometryName);\n      }\n\n      allProperties.push(properties);\n      featuresForSource[getRowUid(properties)] = feature;\n    }\n  });\n\n  this.cleanProperties_(allProperties, featureGeometriesNames);\n  if (allProperties.length > 0) {\n    const gridCreated = this.makeGrid_(allProperties, source);\n    if (gridCreated) {\n      this.featuresForSources_[`${source.label}`] = featuresForSource;\n    }\n  }\n};\n\n\n/**\n * Remove all unwanted columns.\n * @param {Array.<Object>} allProperties A row.\n * @param {Array.<string>} featureGeometriesNames Geometry names.\n * @private\n */\nQueryGridController.prototype.cleanProperties_ = function(allProperties, featureGeometriesNames) {\n  allProperties.forEach((properties) => {\n    featureGeometriesNames.forEach((featureGeometryName) => {\n      delete properties[featureGeometryName];\n    });\n    delete properties['boundedBy'];\n    delete properties['ngeo_feature_type_'];\n  });\n\n  if (this.removeEmptyColumns_ === true) {\n    this.removeEmptyColumnsFn_(allProperties);\n  }\n};\n\n\n/**\n * Remove columns that will be completely empty between each properties.\n * @param {Array.<Object>} allProperties A row.\n * @private\n */\nQueryGridController.prototype.removeEmptyColumnsFn_ = function(allProperties) {\n  // Keep all keys that correspond to at least one value in a properties object.\n  const keysToKeep = [];\n  let i, key;\n  for (key in allProperties[0]) {\n    for (i = 0; i < allProperties.length; i++) {\n      if (allProperties[i][key] !== undefined) {\n        keysToKeep.push(key);\n        break;\n      }\n    }\n  }\n  // Get all keys that previously always refers always to an empty value.\n  let keyToRemove;\n  allProperties.forEach((properties) => {\n    keyToRemove = [];\n    for (key in properties) {\n      if (keysToKeep.indexOf(key) === -1) {\n        keyToRemove.push(key);\n      }\n    }\n    // Remove these keys.\n    keyToRemove.forEach((key) => {\n      delete properties[key];\n    });\n  });\n};\n\n\n/**\n * @param {?Array.<Object>} data Grid rows.\n * @param {import('ngeo/statemanager/WfsPermalink.js').QueryResultSource} source Query source.\n * @return {boolean} Returns true if a grid was created.\n * @private\n */\nQueryGridController.prototype.makeGrid_ = function(data, source) {\n  const sourceLabel = `${source.label}`;\n  let gridConfig = null;\n  if (data !== null) {\n    gridConfig = this.getGridConfiguration_(data);\n    if (gridConfig === null) {\n      return false;\n    }\n  }\n  if (this.loadedGridSources.indexOf(sourceLabel) == -1) {\n    this.loadedGridSources.push(sourceLabel);\n  }\n  this.gridSources[sourceLabel] = {\n    configuration: gridConfig,\n    source: source\n  };\n  return true;\n};\n\n\n/**\n * @param {Array.<!Object>} data Grid rows.\n * @return {?import(\"ngeo/grid/Config.js\").default} Grid config.\n * @private\n */\nQueryGridController.prototype.getGridConfiguration_ = function(data) {\n  console.assert(data.length > 0);\n  const clone = {};\n  Object.assign(clone, data[0]);\n  delete clone.ol_uid;\n  const columns = Object.keys(clone);\n\n  /** @type {Array.<import('ngeo/download/Csv.js').GridColumnDef>} */\n  const columnDefs = [];\n  columns.forEach((column) => {\n    columnDefs.push(/** @type {import('ngeo/download/Csv.js').GridColumnDef} */ ({\n      name: column\n    }));\n  });\n\n  if (columnDefs.length > 0) {\n    return new ngeoGridConfig(data, columnDefs);\n  } else {\n    // no columns, do not show grid\n    return null;\n  }\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n */\nQueryGridController.prototype.clear = function() {\n  this.active = false;\n  this.pending = false;\n  this.gridSources = {};\n  this.loadedGridSources = [];\n  this.selectedTab = null;\n  this.tooManyResults = false;\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n  this.ngeoMapQuerent_.clear();\n  this.featuresForSources_ = {};\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n  }\n};\n\n\n/**\n * Select the tab for the given grid source.\n * @param {GridSource} gridSource Grid source.\n */\nQueryGridController.prototype.selectTab = function(gridSource) {\n  const source = gridSource.source;\n  this.selectedTab = source.label;\n\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n    this.unregisterSelectWatcher_ = null;\n  }\n\n  if (gridSource.configuration !== null) {\n    this.unregisterSelectWatcher_ = this.$scope_.$watchCollection(\n      () => gridSource.configuration.selectedRows,\n      (newSelected, oldSelectedRows) => {\n        if (Object.keys(newSelected) !== Object.keys(oldSelectedRows)) {\n          this.onSelectionChanged_();\n        }\n      });\n  }\n  this.updateFeatures_(gridSource);\n\n  this.reflowGrid_();\n};\n\n\n/**\n * @private\n */\nQueryGridController.prototype.reflowGrid_ = function() {\n  // This is a \"work-around\" to make sure that the grid is rendered correctly.\n  // When a pane is activated by setting `this.selectedTab`, the class `active`\n  // is not yet set on the pane. That's why the class is set manually, and\n  // after the pane is shown (in the next digest loop), the grid table can\n  // be refreshed.\n  const id = this.escapeValue(this.selectedTab || '');\n  const activePane = this.$element_.find(`div.tab-pane#${id}`);\n  activePane.removeClass('active').addClass('active');\n  this.$timeout_(() => {\n    activePane.find('div.ngeo-grid-table-container table')['trigger']('reflow');\n  });\n};\n\n\n/**\n * Called when the row selection has changed.\n * @private\n */\nQueryGridController.prototype.onSelectionChanged_ = function() {\n  if (this.selectedTab === null) {\n    return;\n  }\n\n  const gridSource = this.gridSources[`${this.selectedTab}`];\n  this.updateFeatures_(gridSource);\n};\n\n\n/**\n * @param {GridSource} gridSource Grid source\n * @private\n */\nQueryGridController.prototype.updateFeatures_ = function(gridSource) {\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n\n  if (gridSource.configuration === null) {\n    return;\n  }\n\n  const sourceLabel = `${gridSource.source.label}`;\n  const featuresForSource = this.featuresForSources_[sourceLabel];\n  const selectedRows = gridSource.configuration.selectedRows;\n\n  for (const rowId in featuresForSource) {\n    const feature = featuresForSource[rowId];\n    if (rowId in selectedRows) {\n      this.highlightFeatures_.push(feature);\n    } else {\n      this.features_.push(feature);\n    }\n  }\n};\n\n\n/**\n * Get the currently shown grid source.\n * @return {GridSource|null} Grid source.\n */\nQueryGridController.prototype.getActiveGridSource = function() {\n  if (this.selectedTab === null) {\n    return null;\n  } else {\n    return this.gridSources[`${this.selectedTab}`];\n  }\n};\n\n\n/**\n * Returns if a row of the currently active grid is selected?\n * @return {boolean} Is one selected?\n */\nQueryGridController.prototype.isOneSelected = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return false;\n  } else {\n    return source.configuration.getSelectedCount() > 0;\n  }\n};\n\n\n/**\n * Returns the number of selected rows of the currently active grid.\n * @return {number} The number of selected rows.\n */\nQueryGridController.prototype.getSelectedRowCount = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return 0;\n  } else {\n    return source.configuration.getSelectedCount();\n  }\n};\n\n\n/**\n * Select all rows of the currently active grid.\n */\nQueryGridController.prototype.selectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.selectAll();\n  }\n};\n\n\n/**\n * Deselect all rows of the currently active grid.\n */\nQueryGridController.prototype.unselectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.unselectAll();\n  }\n};\n\n\n/**\n * Invert the selection of the currently active grid.\n */\nQueryGridController.prototype.invertSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.invertSelection();\n  }\n};\n\n\n/**\n * Zoom to the selected features.\n */\nQueryGridController.prototype.zoomToSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const extent = olExtent.createEmpty();\n    this.highlightFeatures_.forEach((feature) => {\n      olExtent.extend(extent, feature.getGeometry().getExtent());\n    });\n    const size = this.map_.getSize();\n    console.assert(size !== undefined);\n    const maxZoom = this.maxRecenterZoom;\n    this.map_.getView().fit(extent, {size, maxZoom});\n  }\n};\n\n\n/**\n * Start a CSV download for the selected features.\n */\nQueryGridController.prototype.downloadCsv = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const columnDefs = source.configuration.columnDefs;\n    console.assert(columnDefs !== undefined);\n    const selectedRows = source.configuration.getSelectedRows();\n\n    this.ngeoCsvDownload_.startDownload(\n      selectedRows, columnDefs, this.filename_);\n  }\n};\n\n\nmodule.controller('GmfDisplayquerygridController', QueryGridController);\n\n\nexport default module;\n"],"sourceRoot":""}